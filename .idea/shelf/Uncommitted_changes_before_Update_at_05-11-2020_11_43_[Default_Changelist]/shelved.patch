Index: app/src/main/java/com/example/bucketlist/PostInnerPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.bucketlist;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.content.Intent;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.EditText;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.graphics.drawable.DrawableCompat;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.example.bucketlist.adapters.RecyclerAdapterComment;\r\nimport com.example.bucketlist.adapters.RecyclerAdapterTrendingCard;\r\nimport com.example.bucketlist.model.CommentModel;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.CollectionReference;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.EventListener;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.FirebaseFirestoreException;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.TimeZone;\r\n\r\nimport de.hdodenhof.circleimageview.CircleImageView;\r\n\r\npublic class PostInnerPage extends AppCompatActivity implements View.OnClickListener {\r\n    private static final String TAG = \"Post Inner Page\";\r\n    String postId;\r\n    String location,username,title,description;\r\n    String dateAsText;\r\n    int likes = 0;\r\n    int dislikes = 0;\r\n    boolean isdisliked = false;\r\n    boolean isliked = false;\r\n    Long timestamp;\r\n    FirebaseFirestore firestore;\r\n    Toolbar toolbar;\r\n    int totalComments;\r\n    CircleImageView userImage;\r\n    RecyclerView commentRecyclerView;\r\n    List<CommentModel> commentModelList ;\r\n    RecyclerAdapterComment adapterComment;\r\n\r\n    int intpoints = 0;\r\n    FirebaseAuth auth;\r\n\r\n    EditText commentText;\r\n    ImageView backButton,bookmarkButton,sendCommentButton;\r\n    ImageView likeButton;\r\n    ImageView dislikeButton;\r\n    TextView locationView,createdBy,timeCreated,titleView,descriptionView,points\r\n            ,noOfComments,toolbartitle;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        setContentView(R.layout.post_inner_page_activity);\r\n\r\n        toolbar = findViewById(R.id.toolBar);\r\n        setSupportActionBar(toolbar);\r\n\r\n\r\n\r\n        postId = getIntent().getStringExtra(\"postId\");\r\n        initialize();\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    public void initialize(){\r\n        auth = FirebaseAuth.getInstance();\r\n        firestore = FirebaseFirestore.getInstance();\r\n        locationView = findViewById(R.id.location);\r\n        createdBy = findViewById(R.id.createdBy);\r\n        timeCreated = findViewById(R.id.timeCreated);\r\n        titleView =findViewById(R.id.titleView);\r\n        descriptionView  =findViewById(R.id.descriptionView);\r\n        points = findViewById(R.id.points);\r\n        backButton = findViewById(R.id.backButton);\r\n        userImage = findViewById(R.id.userImage);\r\n        bookmarkButton = findViewById(R.id.saveBookmark);\r\n        noOfComments = findViewById(R.id.noOfComments);\r\n        sendCommentButton = findViewById(R.id.sendCommentButton);\r\n        commentText = findViewById(R.id.commentText);\r\n        likeButton = findViewById(R.id.likeButton);\r\n        dislikeButton = findViewById(R.id.dislikeButton);\r\n        commentRecyclerView = findViewById(R.id.commentRecyclerView);\r\n        toolbartitle = findViewById(R.id.toolbartitle);\r\n\r\n        likeButton.setOnClickListener(this);\r\n        dislikeButton.setOnClickListener(this);\r\n        backButton.setOnClickListener(this);\r\n        bookmarkButton.setOnClickListener(this);\r\n        sendCommentButton.setOnClickListener(this);\r\n\r\n        if (postId!=null){\r\n            loadPost();\r\n            loadComments();\r\n        }\r\n        ifDocExists();\r\n    }\r\n\r\n    private void ifDocExists() {\r\n        firestore.collection(\"Posts\").document(postId)\r\n                .collection(\"LikedBy\").document(auth.getCurrentUser().getUid())\r\n                .addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n                    @Override\r\n                    public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                        if (value.exists()) {\r\n\r\n                            DrawableCompat.setTint(likeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(), R.color.selectediconcolor));\r\n                            DrawableCompat.setTint(dislikeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(),R.color.postAction));\r\n                            isliked = true;\r\n\r\n                        }\r\n                    }\r\n                });\r\n        firestore.collection(\"Posts\").document(postId)\r\n                .collection(\"DislikedBy\").document(auth.getCurrentUser().getUid())\r\n                .addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n                    @Override\r\n                    public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                        if (value.exists()) {\r\n                            DrawableCompat.setTint(dislikeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(), R.color.selectediconcolor));\r\n                            DrawableCompat.setTint(likeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(),R.color.postAction));\r\n                            isdisliked = true;\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n    private void loadComments() {\r\n        commentModelList = new ArrayList<>();\r\n        firestore.collection(\"Posts\").document(postId).collection(\"Comments\")\r\n                .addSnapshotListener(new EventListener<QuerySnapshot>() {\r\n                    @Override\r\n                    public void onEvent(@Nullable QuerySnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                        if (error!=null){\r\n                            error.printStackTrace();\r\n                        }\r\n                        else{\r\n                            commentModelList.clear();\r\n                            for (QueryDocumentSnapshot snapshot:value){\r\n                                commentModelList.add(new CommentModel(snapshot.getString(\"user id\")\r\n                                        ,snapshot.getString(\"comment\")\r\n                                        ,snapshot.getLong(\"time of comment\").longValue(),\r\n                                        snapshot.getLong(\"total likes\").intValue()));\r\n\r\n\r\n                            }adapterComment.notifyDataSetChanged();\r\n                        }\r\n                    }\r\n                });\r\n        adapterComment= new RecyclerAdapterComment(getApplicationContext(),commentModelList);\r\n        commentRecyclerView.setAdapter(adapterComment);\r\n\r\n\r\n\r\n    }\r\n\r\n    public void loadPost(){\r\n        DocumentReference documentReference = firestore.collection(\"Posts\").document(postId);\r\n        documentReference.addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                if (error!=null){\r\n                    error.printStackTrace();\r\n                }\r\n                else {\r\n                    location =  value.getString(\"location\");\r\n                    String[] arr = location.split(\", \",0);\r\n                    String cityFilename = arr[0] + \", \" + arr[arr.length - 1];\r\n                    locationView.setText(cityFilename);\r\n                    toolbartitle.setText(cityFilename);\r\n\r\n\r\n                    Calendar calendar = Calendar.getInstance();\r\n                    calendar.setTime(new Date());\r\n                    SimpleDateFormat sdf = new SimpleDateFormat(\"hh:mm\");\r\n                    sdf.setTimeZone(TimeZone.getDefault());\r\n                    timestamp = value.getLong(\"timeStamp\").longValue();\r\n                    dateAsText = sdf.format(new Date(timestamp).getTime());\r\n                    timeCreated.setText(dateAsText);\r\n\r\n\r\n                    title = value.getString(\"title\");\r\n                    titleView.setText(title);\r\n\r\n\r\n                    description = value.getString(\"description\");\r\n                    descriptionView.setText(description);\r\n\r\n\r\n                    likes = value.getLong(\"likes\").intValue();\r\n                    dislikes = value.getLong(\"dislikes\").intValue();\r\n\r\n                    intpoints = likes-dislikes;\r\n                    points.setText(Integer.toString(intpoints)+\" Votes\");\r\n\r\n                    totalComments = value.getLong(\"total comments\").intValue();\r\n                    noOfComments.setText(Integer.toString(totalComments) +\" Comments\");\r\n\r\n\r\n\r\n                    username = value.getString(\"createdBy\");\r\n                    FirebaseFirestore.getInstance().collection(\"Users\")\r\n                            .document(username).addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n                        @Override\r\n                        public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                            if (error!=null){\r\n                                Log.e(\"error\",error.getMessage());\r\n                            }\r\n                            else {\r\n                                createdBy.setText(value.getString(\"Display Name\"));\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n\r\n\r\n        Log.d(\"no of comment\",Integer.toString(totalComments));\r\n\r\n        firestore.collection(\"Users\").document(auth.getCurrentUser().getUid()).addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                if (error!=null){\r\n                    error.printStackTrace();\r\n                }\r\n                else{\r\n                    Glide.with(getApplicationContext()).load(value.getString(\"Image Uri\")).into(userImage);\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public void bookmarking(){\r\n        DocumentReference documentReference = firestore.collection(\"Users\").document(auth.getCurrentUser().getUid())\r\n                .collection(\"Bookmarks\").document(postId);\r\n        DocumentReference postDocRef = firestore.collection(\"Posts\").document(postId);\r\n        Map map = new HashMap();\r\n        map.put(\"post reference\",postDocRef);\r\n        documentReference.set(map).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n            @Override\r\n            public void onSuccess(Void aVoid) {\r\n                Log.d(\"successful\",\"successful\");\r\n                Toast.makeText(PostInnerPage.this, \"Bookmarked\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        switch (view.getId()){\r\n            case R.id.backButton:\r\n                Intent i = new Intent(this, CityInnerPage.class);\r\n                i.putExtra(\"cityId\",location);\r\n                finish();\r\n                startActivity(i);\r\n                break;\r\n            case R.id.saveBookmark:\r\n                bookmarking();\r\n                break;\r\n            case R.id.likeButton:\r\n                like();\r\n                break;\r\n            case R.id.dislikeButton:\r\n                dislike();\r\n                Log.d(TAG, \"onClick: \");\r\n                break;\r\n            case R.id.sendCommentButton:\r\n                storingcomment();\r\n\r\n\r\n        }\r\n    }\r\n\r\n    private void storingcomment() {\r\n        if (!commentText.getText().toString().isEmpty()){\r\n            totalComments++;\r\n            DocumentReference commentDocRef = firestore.collection(\"Posts\").document(postId)\r\n                    .collection(\"Comments\").document(\"comment\"+Integer.toString(totalComments));\r\n\r\n            Map commentmap = new HashMap();\r\n            commentmap.put(\"user id\",auth.getCurrentUser().getUid());\r\n            commentmap.put(\"comment\",commentText.getText().toString());\r\n            commentmap.put(\"time of comment\",System.currentTimeMillis());\r\n            commentmap.put(\"total likes\",0);\r\n\r\n            commentDocRef.set(commentmap).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                @Override\r\n                public void onSuccess(Void aVoid) {\r\n                    Log.d(\"msg\",\"comment added\");\r\n                    firestore.collection(\"Posts\").document(postId).update(\"total comments\",totalComments);\r\n                    commentText.setText(null);\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    private void like() {\r\n        if (isliked==false){\r\n            if (isdisliked==true){\r\n                firestore.collection(\"Posts\").document(postId)\r\n                        .collection(\"DislikedBy\").document(auth.getCurrentUser().getUid()).delete();\r\n                dislikes--;\r\n                isdisliked = false;\r\n            }\r\n\r\n\r\n            CollectionReference collectionReference = firestore.collection(\"Posts\").document(postId)\r\n                    .collection(\"LikedBy\");\r\n            Map map1 = new HashMap();\r\n            map1.put(\"ref\", firestore.collection(\"Users\").document(auth.getCurrentUser().getUid()));\r\n            collectionReference.document(auth.getCurrentUser().getUid()).set(map1).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                @Override\r\n                public void onComplete(@NonNull Task<Void> task) {\r\n                    if (task.isSuccessful()) {\r\n                        Log.d(TAG, \"onComplete: \" + \"liked\");\r\n//                    Drawable d = getResources().getDrawable(R.drawable.up_arrow_icon);\r\n//                    d.setColorFilter( 0xffff0000, PorterDuff.Mode.MULTIPLY );\r\n                        DrawableCompat.setTint(likeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(), R.color.selectediconcolor));\r\n                        DrawableCompat.setTint(dislikeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(), R.color.postAction));\r\n\r\n                    }\r\n                }\r\n            });\r\n            isliked = true;\r\n            likes++;\r\n\r\n        }\r\n        else {\r\n            firestore.collection(\"Posts\").document(postId)\r\n                    .collection(\"LikedBy\").document(auth.getCurrentUser().getUid()).delete();\r\n            DrawableCompat.setTint(likeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(), R.color.postAction));\r\n            isliked = false;\r\n            likes--;\r\n        }\r\n        Map likedislike = new HashMap();\r\n        likedislike.put(\"likes\",likes);\r\n        likedislike.put(\"dislikes\",dislikes);\r\n        firestore.collection(\"Posts\").document(postId).update(likedislike).addOnSuccessListener(new OnSuccessListener() {\r\n            @Override\r\n            public void onSuccess(Object o) {\r\n                Log.d(\"like dislike updated\",\"yes\");\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void dislike() {\r\n\r\n        if (isdisliked == false){\r\n            if (isliked == true){\r\n                firestore.collection(\"Posts\").document(postId)\r\n                        .collection(\"LikedBy\").document(auth.getCurrentUser().getUid()).delete();\r\n                likes--;\r\n                isliked = false;\r\n            }\r\n\r\n\r\n            CollectionReference collectionReference = firestore.collection(\"Posts\").document(postId)\r\n                    .collection(\"DislikedBy\");\r\n            Map map1 = new HashMap();\r\n            map1.put(\"ref\",firestore.collection(\"Users\").document(auth.getCurrentUser().getUid()));\r\n            collectionReference.document(auth.getCurrentUser().getUid()).set(map1).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                @Override\r\n                public void onComplete(@NonNull Task<Void> task) {\r\n                    if (task.isSuccessful()) {\r\n                        Log.d(TAG, \"onComplete: \" + \"liked\");\r\n                        DrawableCompat.setTint(dislikeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(), R.color.selectediconcolor));\r\n                        DrawableCompat.setTint(likeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(),R.color.postAction));\r\n\r\n                    }\r\n                }\r\n            });\r\n            isdisliked = true;\r\n            dislikes++;\r\n\r\n        }\r\n        else {\r\n            firestore.collection(\"Posts\").document(postId)\r\n                    .collection(\"DislikedBy\").document(auth.getCurrentUser().getUid()).delete();\r\n            DrawableCompat.setTint(dislikeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(), R.color.postAction));\r\n            isdisliked = false;\r\n            dislikes--;\r\n        }\r\n        Map likedislike = new HashMap();\r\n        likedislike.put(\"likes\",likes);\r\n        likedislike.put(\"dislikes\",dislikes);\r\n        firestore.collection(\"Posts\").document(postId).update(likedislike).addOnSuccessListener(new OnSuccessListener() {\r\n            @Override\r\n            public void onSuccess(Object o) {\r\n                Log.d(\"like dislike updated\",\"yes\");\r\n            }\r\n        });\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/bucketlist/PostInnerPage.java	(revision a31dd31a131cd15cc0bdbc69ac3ad8efc8598eeb)
+++ app/src/main/java/com/example/bucketlist/PostInnerPage.java	(date 1604556676636)
@@ -81,6 +81,8 @@
     TextView locationView,createdBy,timeCreated,titleView,descriptionView,points
             ,noOfComments,toolbartitle;
 
+    boolean isbookmarked=false;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -131,6 +133,7 @@
             loadComments();
         }
         ifDocExists();
+        ifBookmarkExists();
     }
 
     private void ifDocExists() {
@@ -162,6 +165,7 @@
                 });
 
     }
+
     private void loadComments() {
         commentModelList = new ArrayList<>();
         firestore.collection("Posts").document(postId).collection("Comments")
@@ -271,25 +275,67 @@
         });
 
     }
+    private void ifBookmarkExists() {
+        firestore.collection("Users").document(auth.getCurrentUser().getUid())
+                .collection("Bookmarks").document(postId)
+                .addSnapshotListener(new EventListener<DocumentSnapshot>() {
+                    @Override
+                    public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {
+                        if (value.exists()) {
+
+                            bookmarkButton.setImageResource(R.drawable.ic_baseline_bookmark_24);
+                            isbookmarked = true;
+
+                        }else {
+                            bookmarkButton.setImageResource(R.drawable.ic_baseline_bookmark_border_24);
+                            isbookmarked=false;
+                        }
+                    }
+                });
+
+    }
 
     public void bookmarking(){
-        DocumentReference documentReference = firestore.collection("Users").document(auth.getCurrentUser().getUid())
-                .collection("Bookmarks").document(postId);
-        DocumentReference postDocRef = firestore.collection("Posts").document(postId);
-        Map map = new HashMap();
-        map.put("post reference",postDocRef);
-        documentReference.set(map).addOnSuccessListener(new OnSuccessListener<Void>() {
-            @Override
-            public void onSuccess(Void aVoid) {
-                Log.d("successful","successful");
-                Toast.makeText(PostInnerPage.this, "Bookmarked", Toast.LENGTH_SHORT).show();
-            }
-        }).addOnFailureListener(new OnFailureListener() {
-            @Override
-            public void onFailure(@NonNull Exception e) {
-                e.printStackTrace();
-            }
-        });
+        if(isbookmarked==false){
+            DocumentReference documentReference = firestore.collection("Users").document(auth.getCurrentUser().getUid())
+                    .collection("Bookmarks").document(postId);
+            DocumentReference postDocRef = firestore.collection("Posts").document(postId);
+            Map map = new HashMap();
+            map.put("post reference",postDocRef);
+            documentReference.set(map).addOnSuccessListener(new OnSuccessListener<Void>() {
+                @Override
+                public void onSuccess(Void aVoid) {
+                    Log.d("successful","successful");
+                    Toast.makeText(PostInnerPage.this, "Bookmarked", Toast.LENGTH_SHORT).show();
+                }
+            }).addOnFailureListener(new OnFailureListener() {
+                @Override
+                public void onFailure(@NonNull Exception e) {
+                    e.printStackTrace();
+                }
+            });
+
+//            DrawableCompat.setTint(bookmarkButton.getDrawable(), ContextCompat.getColor(getApplicationContext(),R.color.colorwhite));
+            bookmarkButton.setImageResource(R.drawable.ic_baseline_bookmark_24);
+            isbookmarked=true;
+        }else{
+             firestore.collection("Users").document(auth.getCurrentUser().getUid())
+                    .collection("Bookmarks").document(postId).delete()
+                    .addOnCompleteListener(new OnCompleteListener<Void>() {
+                     @Override
+                     public void onComplete(@NonNull Task<Void> task) {
+                         if(task.isSuccessful()){
+                             Log.d(TAG, "onComplete: " + "bookmarked");
+                             Toast.makeText(PostInnerPage.this, "Bookmark Removed", Toast.LENGTH_SHORT).show();
+                         }
+
+                     }
+                 });
+
+            bookmarkButton.setImageResource(R.drawable.ic_baseline_bookmark_border_24);
+            isbookmarked=false;
+        }
+
     }
 
     @Override
Index: app/src/main/java/com/example/bucketlist/BookmarkPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.bucketlist;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\n\r\nimport com.example.bucketlist.adapters.PostRecyclerAdapter;\r\nimport com.example.bucketlist.model.ActivityModel;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.CollectionReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.EventListener;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.FirebaseFirestoreException;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class BookmarkPage extends AppCompatActivity implements View.OnClickListener {\r\n\r\n    FirebaseFirestore firestore;\r\n    FirebaseAuth auth;\r\n    RecyclerView bookmarkRecyclerview;\r\n    PostRecyclerAdapter bookmarkrecyclerAdapter;\r\n    List<ActivityModel> modelList;\r\n    ImageView backButton;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.bookmark_page);\r\n\r\n        auth = FirebaseAuth.getInstance();\r\n        bookmarkRecyclerview = findViewById(R.id.bookmarkRecyclerview);\r\n        backButton = findViewById(R.id.backButton);\r\n\r\n        backButton.setOnClickListener(this);\r\n\r\n\r\n        LoadBookamrkPost();\r\n    }\r\n\r\n    private void LoadBookamrkPost() {\r\n        modelList = new ArrayList<>();\r\n        firestore = FirebaseFirestore.getInstance();\r\n        CollectionReference collection = firestore.collection(\"Users\").document(auth.getCurrentUser().getUid())\r\n                .collection(\"Bookmarks\");\r\n        collection.addSnapshotListener(new EventListener<QuerySnapshot>() {\r\n            @Override\r\n            public void onEvent(@Nullable QuerySnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                if (error!=null){\r\n                    error.printStackTrace();\r\n                }\r\n                else{\r\n                    for (QueryDocumentSnapshot snapshot : value){\r\n                        snapshot.getDocumentReference(\"post reference\").addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n                            @Override\r\n                            public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                                if (error!=null){\r\n                                    error.printStackTrace();\r\n                                }\r\n                                else{\r\n                                    modelList.add(new ActivityModel(value.getString(\"createdBy\"),\r\n                                            value.getString(\"title\"),\r\n                                            value.getLong(\"timeStamp\").longValue(),\r\n                                            value.getString(\"location\"),\r\n                                            value.getLong(\"likes\").intValue(),\r\n                                            value.getLong(\"dislikes\").intValue(),\r\n                                            value.getId(),value.getLong(\"total comments\").intValue()));\r\n                                    bookmarkrecyclerAdapter.notifyDataSetChanged();\r\n\r\n                                    Log.d(\"title\", value.getString(\"title\"));\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        bookmarkrecyclerAdapter = new PostRecyclerAdapter(getApplicationContext(),modelList);\r\n        bookmarkRecyclerview.setAdapter(bookmarkrecyclerAdapter);\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        if (view.getId()==R.id.backButton){\r\n            Intent i = new Intent(getApplicationContext(),HomeActivity.class);\r\n            i.putExtra(\"which Activity\",\"from Add new city\");\r\n            startActivity(i);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/bucketlist/BookmarkPage.java	(revision a31dd31a131cd15cc0bdbc69ac3ad8efc8598eeb)
+++ app/src/main/java/com/example/bucketlist/BookmarkPage.java	(date 1604555742584)
@@ -13,6 +13,7 @@
 import android.widget.ImageView;
 
 import com.example.bucketlist.adapters.PostRecyclerAdapter;
+import com.example.bucketlist.fragments.homePageFragment.CityFragment;
 import com.example.bucketlist.model.ActivityModel;
 import com.google.firebase.auth.FirebaseAuth;
 import com.google.firebase.firestore.CollectionReference;
@@ -96,7 +97,7 @@
     @Override
     public void onClick(View view) {
         if (view.getId()==R.id.backButton){
-            Intent i = new Intent(getApplicationContext(),HomeActivity.class);
+            Intent i = new Intent(getApplicationContext(), HomeActivity.class);
             i.putExtra("which Activity","from Add new city");
             startActivity(i);
         }
