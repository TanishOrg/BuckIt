Index: app/src/main/java/com/example/bucketlist/PostInnerPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.bucketlist;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.content.Intent;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.graphics.drawable.DrawableCompat;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.CollectionReference;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.EventListener;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.FirebaseFirestoreException;\r\n\r\nimport java.lang.ref.Reference;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.TimeZone;\r\n\r\nimport de.hdodenhof.circleimageview.CircleImageView;\r\n\r\npublic class PostInnerPage extends AppCompatActivity implements View.OnClickListener {\r\n    private static final String TAG = \"Post Inner Page\";\r\n    String postId;\r\n    String location,username,title,description;\r\n    String dateAsText;\r\n    int likes;\r\n    Long timestamp;\r\n    FirebaseFirestore firestore;\r\n    Toolbar toolbar;\r\n\r\n    CircleImageView userImage;\r\n\r\n    FirebaseAuth auth;\r\n\r\n    ImageView backButton,bookmarkButton;\r\n    ImageView likeButton;\r\n    ImageView dislikeButton;\r\n\r\n    TextView locationView,createdBy,timeCreated,titleView,descriptionView,likesView;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        setContentView(R.layout.post_inner_page_activity);\r\n\r\n        toolbar = findViewById(R.id.toolBar);\r\n        setSupportActionBar(toolbar);\r\n\r\n\r\n\r\n        postId = getIntent().getStringExtra(\"postId\");\r\n        initialize();\r\n\r\n\r\n\r\n    }\r\n\r\n    public void initialize(){\r\n        auth = FirebaseAuth.getInstance();\r\n        firestore = FirebaseFirestore.getInstance();\r\n        locationView = findViewById(R.id.location);\r\n        createdBy = findViewById(R.id.createdBy);\r\n        timeCreated = findViewById(R.id.timeCreated);\r\n        titleView =findViewById(R.id.titleView);\r\n        descriptionView  =findViewById(R.id.descriptionView);\r\n        likesView = findViewById(R.id.noOfLikes);\r\n        backButton = findViewById(R.id.backButton);\r\n        userImage = findViewById(R.id.userImage);\r\n        bookmarkButton = findViewById(R.id.saveBookmark);\r\n        likeButton = findViewById(R.id.likeButton);\r\n        dislikeButton = findViewById(R.id.dislikeButton);\r\n\r\n        likeButton.setOnClickListener(this);\r\n        dislikeButton.setOnClickListener(this);\r\n        backButton.setOnClickListener(this);\r\n        bookmarkButton.setOnClickListener(this);\r\n\r\n        if (postId!=null){\r\n            loadPost();\r\n        }\r\n        ifDocExists();\r\n    }\r\n\r\n    private void ifDocExists() {\r\n         firestore.collection(\"Posts\").document(postId)\r\n                .collection(\"LikedBy\").document(auth.getCurrentUser().getUid())\r\n                 .addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n                     @Override\r\n                     public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                         if (value.exists()) {\r\n\r\n                             DrawableCompat.setTint(likeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(), R.color.colorAccent));\r\n                             DrawableCompat.setTint(dislikeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(),R.color.postAction));\r\n\r\n                         }\r\n                     }\r\n                 });\r\n        firestore.collection(\"Posts\").document(postId)\r\n                .collection(\"DislikedBy\").document(auth.getCurrentUser().getUid())\r\n                .addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n                    @Override\r\n                    public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                        if (value.exists()) {\r\n\r\n                            DrawableCompat.setTint(dislikeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(), R.color.colorAccent));\r\n                            DrawableCompat.setTint(likeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(),R.color.postAction));\r\n\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    public void loadPost(){\r\n        DocumentReference documentReference = firestore.collection(\"Posts\").document(postId);\r\n        documentReference.addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                if (error!=null){\r\n                    error.printStackTrace();\r\n                }\r\n                else {\r\n                    location =  value.getString(\"location\");\r\n                    String[] arr = location.split(\", \",0);\r\n                    String cityFilename = arr[0] + \", \" + arr[arr.length - 1];\r\n                    locationView.setText(cityFilename);\r\n\r\n\r\n                    Calendar calendar = Calendar.getInstance();\r\n                    calendar.setTime(new Date());\r\n                    SimpleDateFormat sdf = new SimpleDateFormat(\"hh:mm\");\r\n                    sdf.setTimeZone(TimeZone.getDefault());\r\n                    timestamp = value.getLong(\"timeStamp\").longValue();\r\n                    dateAsText = sdf.format(new Date(timestamp).getTime());\r\n                    timeCreated.setText(dateAsText);\r\n\r\n\r\n                    title = value.getString(\"title\");\r\n                    titleView.setText(title);\r\n\r\n\r\n                    description = value.getString(\"description\");\r\n                    descriptionView.setText(description);\r\n\r\n\r\n                    likes = value.getLong(\"likes\").intValue();\r\n                    likesView.setText(Integer.toString(likes));\r\n\r\n\r\n\r\n                    username = value.getString(\"createdBy\");\r\n                    FirebaseFirestore.getInstance().collection(\"Users\")\r\n                            .document(username).addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n                        @Override\r\n                        public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                            if (error!=null){\r\n                                Log.e(\"error\",error.getMessage());\r\n                            }\r\n                            else {\r\n                                createdBy.setText(value.getString(\"Display Name\"));\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n        firestore.collection(\"Users\").document(auth.getCurrentUser().getUid()).addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                if (error!=null){\r\n                    error.printStackTrace();\r\n                }\r\n                else{\r\n                    Glide.with(getApplicationContext()).load(value.getString(\"Image Uri\")).into(userImage);\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public void bookmarking(){\r\n        DocumentReference documentReference = firestore.collection(\"Users\").document(auth.getCurrentUser().getUid())\r\n                .collection(\"Bookmarks\").document(postId);\r\n        DocumentReference postDocRef = firestore.collection(\"Posts\").document(postId);\r\n        Map map = new HashMap();\r\n        map.put(\"post reference\",postDocRef);\r\n        documentReference.set(map).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n            @Override\r\n            public void onSuccess(Void aVoid) {\r\n                Log.d(\"successful\",\"successful\");\r\n                Toast.makeText(PostInnerPage.this, \"Bookmarked\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        switch (view.getId()){\r\n            case R.id.backButton:\r\n                Intent i = new Intent(this, CityInnerPage.class);\r\n                i.putExtra(\"cityId\",location);\r\n                finish();\r\n                startActivity(i);\r\n                break;\r\n            case R.id.saveBookmark:\r\n               bookmarking();\r\n               break;\r\n            case R.id.likeButton:\r\n                like(view);\r\n                break;\r\n            case R.id.dislikeButton:\r\n                dislike();\r\n                Log.d(TAG, \"onClick: \");\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * We have the post id and in users document we will create a new collection of liked posts\r\n     */\r\n    private void like(final View view) {\r\n\r\n//        CollectionReference reference = firestore.collection(\"Users\")\r\n//                .document(auth.getCurrentUser().getUid()).collection(\"LikedPost\");\r\n//        DocumentReference documentReference = firestore.collection(\"Posts\").document(postId);\r\n//        Map map = new HashMap();\r\n//        map.put(\"ref\",documentReference);\r\n//        reference.document(postId).set(map).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n//            @Override\r\n//            public void onSuccess(Void aVoid) {\r\n//                Snackbar.make(view,\"Liked\",Snackbar.LENGTH_SHORT).show();\r\n//            }\r\n//        });\r\n        firestore.collection(\"Posts\").document(postId)\r\n                .collection(\"DislikedBy\").document(auth.getCurrentUser().getUid()).delete();\r\n\r\n        CollectionReference collectionReference = firestore.collection(\"Posts\").document(postId)\r\n                .collection(\"LikedBy\");\r\n        Map map1 = new HashMap();\r\n        map1.put(\"ref\",firestore.collection(\"Users\").document(auth.getCurrentUser().getUid()));\r\n        collectionReference.document(auth.getCurrentUser().getUid()).set(map1).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                if (task.isSuccessful()) {\r\n                    Log.d(TAG, \"onComplete: \" + \"liked\");\r\n//                    Drawable d = getResources().getDrawable(R.drawable.up_arrow_icon);\r\n//                    d.setColorFilter( 0xffff0000, PorterDuff.Mode.MULTIPLY );\r\n                    DrawableCompat.setTint(likeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(), R.color.colorAccent));\r\n                    DrawableCompat.setTint(dislikeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(),R.color.postAction));\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void dislike() {\r\n\r\n        firestore.collection(\"Posts\").document(postId)\r\n                .collection(\"LikedBy\").document(auth.getCurrentUser().getUid()).delete();\r\n\r\n        CollectionReference collectionReference = firestore.collection(\"Posts\").document(postId)\r\n                .collection(\"DislikedBy\");\r\n        Map map1 = new HashMap();\r\n        map1.put(\"ref\",firestore.collection(\"Users\").document(auth.getCurrentUser().getUid()));\r\n        collectionReference.document(auth.getCurrentUser().getUid()).set(map1).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n\r\n                if (task.isSuccessful()) {\r\n                    Log.d(TAG, \"onComplete: \" + \"liked\");\r\n                    DrawableCompat.setTint(dislikeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(), R.color.colorAccent));\r\n                    DrawableCompat.setTint(likeButton.getDrawable(), ContextCompat.getColor(getApplicationContext(),R.color.postAction));\r\n\r\n                }\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/bucketlist/PostInnerPage.java	(revision 067eb58e2eb76a692afc2091fcc5ef87431b4698)
+++ app/src/main/java/com/example/bucketlist/PostInnerPage.java	(date 1604470281123)
@@ -63,6 +63,8 @@
     ImageView likeButton;
     ImageView dislikeButton;
 
+    boolean bookmarked=false;
+
     TextView locationView,createdBy,timeCreated,titleView,descriptionView,likesView;
 
     @Override
@@ -237,7 +239,13 @@
                 startActivity(i);
                 break;
             case R.id.saveBookmark:
-               bookmarking();
+               if(bookmarked){
+                   bookmarkButton.setImageResource(R.drawable.ic_baseline_bookmark_24);
+                   bookmarking();
+               }else{
+                   bookmarkButton.setImageResource(R.drawable.ic_baseline_bookmark_border_24);
+               }
+               bookmarked= !bookmarked;
                break;
             case R.id.likeButton:
                 like(view);
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_03-11-2020_17_09__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_03-11-2020_17_09__Default_Changelist_.xml
